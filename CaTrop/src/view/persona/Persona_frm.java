/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.persona;

import com.sun.glass.events.KeyEvent;
import controller.ConexionDB;
import java.awt.HeadlessException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import view.Colaborador_frm;

/**
 *
 * @author ace
 */
public final class Persona_frm extends javax.swing.JFrame {

    /**
     * Creates new form puesto
     */
    Connection con = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    ResultSet rs2 = null;
    PreparedStatement pst2 = null;
    String sqlSelect;
    String sqlSelect_Valor;
    String sqlInsert;
    String sqlDelete;

    private String id_Persona;

    //declarar static e instanciarla en tu contructor`
    static DefaultComboBoxModel modelo;

    public Persona_frm() throws IOException {
        initComponents();

        //inicialización de las variables de la coneccion a la base de datos
        con = ConexionDB.conexionDB();
        //llama al procedimiento de obtener la información.

        //centra la ventana para que se inicie en el centro del escritorio
        setLocationRelativeTo(null);
        initState();
        sqlSelect = "SELECT `idpersona`, `nombre`, `cedula`, `telefono`, `direccion`, `tipo_persona_idtipo_persona` FROM `persona` order BY `nombre`";
        sqlSelect_Valor = "SELECT `idpersona`, `nombre`, `cedula`, `telefono`, `direccion`, `tipo_persona_idtipo_persona` FROM `persona` WHERE `nombre` = '";
        sqlInsert = "INSERT INTO `persona`(`nombre`, `cedula`, `telefono`, `direccion`, `tipo_persona_idtipo_persona`) VALUES (";
        sqlDelete = "DELETE FROM `persona` WHERE `idpersona` = ";

        modelo = new DefaultComboBoxModel();

        llena_combo(); // llenar los datos al ejecutar el programa
    }

    public void llena_combo() { // static para poder llamarlo desde el otro frame o JDialog

        try {
            modelo.removeAllElements(); // eliminamos lo elementos

            Statement stmt;
            stmt = con.createStatement();

            String sql1 = "SELECT `desc_persona` FROM `tipo_persona`";
            rs = stmt.executeQuery(sql1);

            while (rs.next()) {
                modelo.addElement(rs.getString("desc_persona"));
            }
            cmbTipoPersona.setModel(modelo); // seteamos el modelo y se cargan los datos

        } catch (HeadlessException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }
    
//    private void Get_Data() {
//        //Select sobre el estatus_empleado y se le asigna el valor a la columna de la tabla del formulario.
//
//        String sql = "SELECT * FROM `cabina` ORDER BY `estado_cabina`";
//        DefaultTableModel tableModel;
//        //creación de un array para definir las columnas
//        String[] columnas = {"descripcion_cabina", "estado_cabina", "precio", "tipo_cabina"};
//        //creación de un array para definir los registros que se incluiran por medio del codigo
//        String[] registro = new String[4];
//
//        tableModel = new DefaultTableModel(null, columnas);
//        try {
//            pst = con.prepareStatement(sql);
//
//            rs = pst.executeQuery();
//
//            while (rs.next()) {
//                registro[0] = rs.getString("descripcion_cabina");
//                registro[1] = rs.getString("estado_cabina");
//                registro[2] = rs.getString("precio");
//                registro[3] = rs.getString("tipo_cabina");
//                tableModel.addRow(registro);
//            }
//
//            tablaCabina.setModel(tableModel);
//
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e);
//
//        }
//    }

    private void initState() {
        txtNombre_Apellidos.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtPhone.setEnabled(false);
        txtCedula.setEnabled(false);
        cmbTipoPersona.setEnabled(false);
        Clasificacion.setText("");
        txtNombre_Apellidos.setText("");
        nuevo.setEnabled(true);
        guardar.setEnabled(false);
        buscar.setEnabled(true);
        editar.setEnabled(false);
        borrar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtNombre_Apellidos = new javax.swing.JTextField();
        lblCedula = new javax.swing.JLabel();
        txtCedula = new javax.swing.JTextField();
        idPersona = new javax.swing.JLabel();
        Clasificacion = new javax.swing.JLabel();
        lblDireccion = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        cmbTipoPersona = new javax.swing.JComboBox<>();
        nombreApellido = new javax.swing.JLabel();
        lblClasificacion = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        Persona = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nuevo = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        buscar = new javax.swing.JButton();
        volver = new javax.swing.JButton();
        nombreCliente = new javax.swing.JLabel();
        idCliente = new javax.swing.JLabel();
        fondo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuSalir = new javax.swing.JMenu();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agregar Nueva Persona");
        setMinimumSize(new java.awt.Dimension(713, 380));
        setUndecorated(true);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtNombre_Apellidos.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        txtNombre_Apellidos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(txtNombre_Apellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 360, 40));

        lblCedula.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        lblCedula.setForeground(java.awt.Color.white);
        lblCedula.setText("Cedula");
        getContentPane().add(lblCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 70, -1, -1));

        txtCedula.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        txtCedula.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCedulaActionPerformed(evt);
            }
        });
        getContentPane().add(txtCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, 270, 40));

        idPersona.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        idPersona.setForeground(java.awt.Color.white);
        idPersona.setText("idPersona");
        getContentPane().add(idPersona, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 270, -1, -1));

        Clasificacion.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        Clasificacion.setForeground(java.awt.Color.white);
        Clasificacion.setText("Clasificacion");
        getContentPane().add(Clasificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 270, -1, -1));

        lblDireccion.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        lblDireccion.setForeground(java.awt.Color.white);
        lblDireccion.setText("Direccion");
        getContentPane().add(lblDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, -1, -1));

        lblPhone.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        lblPhone.setForeground(java.awt.Color.white);
        lblPhone.setText("Télefono o Celular");
        getContentPane().add(lblPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        txtDireccion.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        txtDireccion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 440, 40));

        cmbTipoPersona.setFont(new java.awt.Font("Dialog", 1, 16));
        cmbTipoPersona.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbTipoPersona.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmbTipoPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoPersonaActionPerformed(evt);
            }
        });
        getContentPane().add(cmbTipoPersona, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 200, 40));

        nombreApellido.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        nombreApellido.setForeground(java.awt.Color.white);
        nombreApellido.setText("Nombre y Apellidos");
        getContentPane().add(nombreApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        lblClasificacion.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        lblClasificacion.setForeground(java.awt.Color.white);
        lblClasificacion.setText("Clasificación");
        getContentPane().add(lblClasificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        txtPhone.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        txtPhone.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 200, 40));

        Persona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/usuario.png"))); // NOI18N
        getContentPane().add(Persona, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 230, 150, 150));

        nuevo.setBackground(new java.awt.Color(204, 204, 204));
        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/CRUD/store-new-badges.png"))); // NOI18N
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        guardar.setBackground(new java.awt.Color(204, 204, 204));
        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/CRUD/save-icon-silhouette.png"))); // NOI18N
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        editar.setBackground(new java.awt.Color(204, 204, 204));
        editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/CRUD/edit.png"))); // NOI18N
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        borrar.setBackground(new java.awt.Color(204, 204, 204));
        borrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/CRUD/dustbin.png"))); // NOI18N
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        buscar.setBackground(new java.awt.Color(204, 204, 204));
        buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/CRUD/searching-magnifying-glass.png"))); // NOI18N
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        volver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/CRUD/volver.png"))); // NOI18N
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(volver)
                .addGap(18, 18, 18)
                .addComponent(nuevo)
                .addGap(18, 18, 18)
                .addComponent(guardar)
                .addGap(18, 18, 18)
                .addComponent(borrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editar)
                .addGap(24, 24, 24)
                .addComponent(buscar)
                .addContainerGap(126, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buscar)
                    .addComponent(volver)
                    .addComponent(nuevo)
                    .addComponent(guardar)
                    .addComponent(borrar)
                    .addComponent(editar))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 70));

        nombreCliente.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        nombreCliente.setForeground(java.awt.Color.white);
        nombreCliente.setText("nombreCliente");
        getContentPane().add(nombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, -1, -1));

        idCliente.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        idCliente.setForeground(java.awt.Color.white);
        idCliente.setText("idCliente");
        getContentPane().add(idCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 290, -1, -1));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/fondos/celeste.png"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 810, 380));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 0, 250, 370));

        jMenu1.setText("File");

        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/exit-sign.png"))); // NOI18N
        mnuSalir.setMnemonic(KeyEvent.VK_X);
        mnuSalir.setText("Salir");
        mnuSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mnuSalir.setName(""); // NOI18N
        mnuSalir.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                mnuSalirMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        mnuSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuSalirMouseClicked(evt);
            }
        });
        jMenu1.add(mnuSalir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuSalirMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_mnuSalirMenuKeyPressed


    }//GEN-LAST:event_mnuSalirMenuKeyPressed

    private void mnuSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuSalirMouseClicked
        // TODO add your handling code here:
        dispose();

    }//GEN-LAST:event_mnuSalirMouseClicked

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        // TODO add your handling code here:
        txtNombre_Apellidos.setEnabled(true);

        txtDireccion.setEnabled(true);
        txtPhone.setEnabled(true);
        txtCedula.setEnabled(true);
        cmbTipoPersona.setEnabled(true);
        Clasificacion.setText("");
        txtNombre_Apellidos.setText("");
        txtPhone.setText("");

        txtPhone.setText("");
        txtNombre_Apellidos.requestDefaultFocus();
        nuevo.setEnabled(false);
        guardar.setEnabled(true);
        buscar.setEnabled(false);
        editar.setEnabled(false);
        borrar.setEnabled(false);
    }//GEN-LAST:event_nuevoActionPerformed
    
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed

        agregarPersona();

    }//GEN-LAST:event_guardarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        // TODO add your handling code here:

        try {
            int P = JOptionPane.showConfirmDialog(null, " Quiere editar este dato ?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (P == 0) {
                con = ConexionDB.conexionDB();
                Statement stmt;
                stmt = con.createStatement();

                String Pru = "UPDATE `persona` SET `nombre` = '" + txtNombre_Apellidos.getText() + "',`cedula` = '" + txtCedula.getText() + "', `telefono` = '" + txtPhone.getText() + "',`direccion`='" + txtPhone.getText() + "',`tipo_persona_idtipo_persona`='" + Clasificacion.getText() + "' WHERE `idpersona`='" + idPersona.getText() + "'";
                pst = con.prepareStatement(Pru);
                pst.execute();
                JOptionPane.showMessageDialog(this, "Guardado con Exito saved", "Tipo de Usuario", JOptionPane.INFORMATION_MESSAGE);
                txtNombre_Apellidos.setText("");

                if (P == 1) {
                    txtNombre_Apellidos.setText("");

                }
            }

        } catch (HeadlessException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);

        }

    }//GEN-LAST:event_editarActionPerformed

    public void accion_buscar() {
        txtNombre_Apellidos.setEnabled(true);
        txtDireccion.setEnabled(true);
        txtPhone.setEnabled(true);

        txtCedula.setEnabled(true);
        cmbTipoPersona.setEnabled(true);

        txtNombre_Apellidos.setText("");
        txtDireccion.setText("");
        txtPhone.setText("");
        Clasificacion.setText("");
        txtCedula.setText("");

        nuevo.setEnabled(false);
        guardar.setEnabled(false);
        buscar.setEnabled(false);
        editar.setEnabled(false);
        borrar.setEnabled(false);
    }
    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        // TODO add your handling code here:
        Buscar_Persona_frm buscar_Persona_frm;
        try {
            buscar_Persona_frm = new Buscar_Persona_frm();
            buscar_Persona_frm.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(Persona_frm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_buscarActionPerformed

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        // TODO add your handling code here:
        try {
            int P = JOptionPane.showConfirmDialog(null, " Seguro que quiere eliminar ?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (P == 0) {
                con = ConexionDB.conexionDB();
                //DELETE FROM `Horario_frm` WHERE `horario_id` = 4
                String sql = sqlDelete + idPersona.getText() + "";
                //String sql = "DELETE FROM `horario` WHERE `horario_id`='" + lbl_Horario_id.getText() + "'";
                pst = con.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(this, "Successfully deleted", "Record", JOptionPane.INFORMATION_MESSAGE);
                initState();

            }
            initState();

        } catch (HeadlessException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);

        }
    }//GEN-LAST:event_borrarActionPerformed

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed

        txtNombre_Apellidos.setEnabled(false);

        txtDireccion.setEnabled(false);
        txtPhone.setEnabled(false);

        txtCedula.setEnabled(false);

        idPersona.setText("");
        txtNombre_Apellidos.setText("");
        txtPhone.setText("");
        Clasificacion.setText("");
        txtPhone.setText("");

        txtNombre_Apellidos.requestDefaultFocus();
        nuevo.setEnabled(true);
        guardar.setEnabled(false);
        buscar.setEnabled(false);
        editar.setEnabled(false);
        borrar.setEnabled(false);
    }//GEN-LAST:event_volverActionPerformed

    private void txtCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCedulaActionPerformed

    private void agregarPersona() {
        try {

            con = ConexionDB.conexionDB();

            if (txtNombre_Apellidos.getText().equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Favor ingresa el Nombre y Apellidos ",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDireccion.getText().equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Favor ingresa la Direccion",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtPhone.getText().equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Favor ingresa el n\u00FAmero de Tel\u00E9fono o Celular ",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Clasificacion.getText().equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Favor ingresa la clasificaci\u00F3n de la persona ",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtCedula.getText().equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Favor ingresa el n\u00FAmero de c\u00E9dula!",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Statement stmt;
            stmt = con.createStatement();
            try {
                String sql_persona = "SELECT * FROM `persona` WHERE `nombre` LIKE '%" + txtNombre_Apellidos.getText() + "%'";
                pst = con.prepareStatement(sql_persona);
                rs = pst.executeQuery();
                if (rs.next()) {
                    String sel1 = rs.getString("idpersona");
                    String sel2 = rs.getString("nombre");
                    String sel3 = rs.getString("cedula");
                    String sel4 = rs.getString("telefono");
                    String sel5 = rs.getString("direccion");
                    String sel6 = rs.getString("tipo_persona_idtipo_persona");

                    idPersona.setText(sel1);
                    txtNombre_Apellidos.setText(sel2);
                    txtCedula.setText(sel3);
                    txtDireccion.setText(sel5);
                    txtPhone.setText(sel4);
                    Clasificacion.setText(sel6);
                    cmbTipoPersona.setSelectedIndex(Integer.parseInt(sel6) - 1);
                    JOptionPane.showMessageDialog(this, "Valores Restablecidos", "Persona", JOptionPane.INFORMATION_MESSAGE);
                    guardar.setEnabled(false);
                }

                String queryAgregar = "INSERT INTO `persona`(`nombre`, `cedula`, `telefono`, `direccion`, `tipo_persona_idtipo_persona`) VALUES (?,?,?,?,?)";

                rs = pst.executeQuery();
                PreparedStatement preparedst = con.prepareStatement(queryAgregar);
                preparedst.setString(1, txtNombre_Apellidos.getText());
                preparedst.setString(2, txtCedula.getText());
                preparedst.setString(3, txtPhone.getText());
                preparedst.setString(4, txtDireccion.getText());
                preparedst.setString(5, Clasificacion.getText());
                JOptionPane.showMessageDialog(this, "Guardado con Exito saved", "Gasto Operativo", JOptionPane.INFORMATION_MESSAGE);
                String tipoPersonaSeleccionada;
                tipoPersonaSeleccionada = (String) cmbTipoPersona.getSelectedItem();
                if (tipoPersonaSeleccionada.equals("Empleado")) {
                    String sql_idPersona = "SELECT * FROM `persona` WHERE `nombre` LIKE '%" + txtNombre_Apellidos.getText() + "%'";
                    pst = con.prepareStatement(sql_persona);
                    rs = pst.executeQuery();
                    if (rs.next()) {
                        String id1 = rs.getString("idpersona");
                        idPersona.setText(id1);
                        System.out.println(idPersona.getText());
                        guardar.setEnabled(false);
                    }

                    Colaborador_Frm cf;
                    cf = new Colaborador_Frm();
                    cf.setVisible(true);
                    this.hide();
                    Colaborador_Frm.idPersona.setText(idPersona.getText());
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        } catch (SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, e);

        }

    }
    private void cmbTipoPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoPersonaActionPerformed
        /*
        Este Combo Seleccionado Muestra los tipos de personas que se encuentran disponibles en la BD
        
         */
        try {
            /*
            Este Select busca cada uno de los elementos para llenar el combo
             */
            String sqlConsulta_TPersona = "SELECT `idtipo_persona`, `desc_persona` FROM `tipo_persona` WHERE `desc_persona` = '" + cmbTipoPersona.getSelectedItem() + "'";
            pst = con.prepareStatement(sqlConsulta_TPersona);

            rs = pst.executeQuery();
            if (rs.next()) {
                String add1 = rs.getString("idtipo_persona");
                Clasificacion.setText(add1);
                String tipoPersonaSeleccionada;
                tipoPersonaSeleccionada = (String) cmbTipoPersona.getSelectedItem();
                if (tipoPersonaSeleccionada.equals("Cliente")) {
                    JOptionPane.showMessageDialog(Persona,
                            "Bienvenido",
                            tipoPersonaSeleccionada, JOptionPane.WARNING_MESSAGE);
                    try {
                        if (txtNombre_Apellidos.getText().equals("")) {
                            JOptionPane.showMessageDialog(this, "Favor ingresa el Nombre y Apellidos ", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                        Statement stmt;
                        stmt = con.createStatement();

                        String sql1 = "SELECT * FROM `cliente_empresa` WHERE "
                                + "`nombre_empresa` LIKE '%"
                                + txtNombre_Apellidos.getText() + "%'";
                        rs = stmt.executeQuery(sql1);
                        if (rs.next()) {
                            JOptionPane.showMessageDialog(this, "Valor ya existe.", "Cliente Existente",
                                    JOptionPane.ERROR_MESSAGE);
                            pst = con.prepareStatement(sql1);
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                String addCliente1 = rs.getString("empresa_id");
                                String addCliente2 = rs.getString("nombre_empresa");

                                nombreCliente.setText(addCliente2);

                                idCliente.setText(add1);

                            }
                            txtNombre_Apellidos.setFocusable(true);
                            return;

                        }

                        String sqlIns = "INSERT INTO "
                                + "`cliente_empresa`(`nombre_empresa`) "
                                + "VALUES ('" + txtNombre_Apellidos.getText() + "')";
                        pst = con.prepareStatement(sqlIns);
                        pst.execute();
                        JOptionPane.showMessageDialog(this,
                                "Guardado con Exito saved", "Cliente Agregado",
                                JOptionPane.INFORMATION_MESSAGE);

                    } catch (HeadlessException | SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex);

                    }

                }
                if (tipoPersonaSeleccionada.equals("Colaborador")) {
                    agregarPersona();
                    JOptionPane.showMessageDialog(Persona, "Tipo Persona", tipoPersonaSeleccionada, JOptionPane.WARNING_MESSAGE);
                    Colaborador_frm colaborador = new Colaborador_frm();
                    colaborador.setVisible(true);

                    Colaborador_frm.id_persona.setText(idPersona.getText());

                }
                if (tipoPersonaSeleccionada.equals("Proveedor")) {
                    JOptionPane.showMessageDialog(Persona, "Tipo Persona", tipoPersonaSeleccionada, JOptionPane.WARNING_MESSAGE);
                }

            }

        } catch (SQLException | HeadlessException | IOException e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }//GEN-LAST:event_cmbTipoPersonaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Persona_frm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Persona_frm().setVisible(true);

            } catch (IOException ex) {
                Logger.getLogger(Persona_frm.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel Clasificacion;
    private javax.swing.JLabel Persona;
    private javax.swing.JButton borrar;
    private javax.swing.JButton buscar;
    private javax.swing.JComboBox<String> cmbTipoPersona;
    private javax.swing.JButton editar;
    private javax.swing.JLabel fondo;
    private javax.swing.JButton guardar;
    public static javax.swing.JLabel idCliente;
    private javax.swing.JLabel idPersona;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblClasificacion;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JMenu mnuSalir;
    private javax.swing.JLabel nombreApellido;
    private javax.swing.JLabel nombreCliente;
    private javax.swing.JButton nuevo;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtNombre_Apellidos;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
